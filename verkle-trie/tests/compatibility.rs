use verkle_trie::{
  database::memory_db::MemoryDb, Trie, TrieTrait
};
use verkle_trie::TestConfig;
use std::fs::File;
use std::io::Write;
use hex::FromHex;
use base64::{encode};


// This test is used to compare the state of the tree with other verkle implementations.
// More tests will be added in the future.
// The state of the tree is written to "compatibility.result"
// TODO: standardize the format of the tree dump so it can be easily compared


#[test]
fn compatibility() {
    let kvps = [
        makeKvp("744f493648c83c5ede1726a0cfbe36d3830fd5b64a820b79ca77fe1593352600", "0000000000000000000000000000000000000000000000000000000000000000"),
        makeKvp("744f493648c83c5ede1726a0cfbe36d3830fd5b64a820b79ca77fe1593352601", "0000000000000000000000000000000000000000000000000000000000000000"),
        makeKvp("744f493648c83c5ede1726a0cfbe36d3830fd5b64a820b79ca77fe1593352602", "0100000000000000000000000000000000000000000000000000000000000000"),
        makeKvp("744f493648c83c5ede1726a0cfbe36d3830fd5b64a820b79ca77fe1593352603", "f8811a5ee0d54eca4880eaee7b102eae4b3963ff343f50a024c0fd3d367cb8cc"),
        makeKvp("744f493648c83c5ede1726a0cfbe36d3830fd5b64a820b79ca77fe1593352604", "5001000000000000000000000000000000000000000000000000000000000000"),
        makeKvp("744f493648c83c5ede1726a0cfbe36d3830fd5b64a820b79ca77fe1593352640", "0000000000000000000000000000000000000000000000000000000000000000"),
        makeKvp("744f493648c83c5ede1726a0cfbe36d3830fd5b64a820b79ca77fe1593352680", "00608060405234801561001057600080fd5b50600436106100365760003560e0"),
        makeKvp("744f493648c83c5ede1726a0cfbe36d3830fd5b64a820b79ca77fe1593352681", "001c80632e64cec11461003b5780636057361d14610059575b600080fd5b6100"),
        makeKvp("744f493648c83c5ede1726a0cfbe36d3830fd5b64a820b79ca77fe1593352682", "0143610075565b60405161005091906100d9565b60405180910390f35b610073"),
        makeKvp("744f493648c83c5ede1726a0cfbe36d3830fd5b64a820b79ca77fe1593352683", "00600480360381019061006e919061009d565b61007e565b005b600080549050"),
        makeKvp("744f493648c83c5ede1726a0cfbe36d3830fd5b64a820b79ca77fe1593352684", "0090565b8060008190555050565b60008135905061009781610103565b929150"),
        makeKvp("744f493648c83c5ede1726a0cfbe36d3830fd5b64a820b79ca77fe1593352685", "0050565b6000602082840312156100b3576100b26100fe565b5b60006100c184"),
        makeKvp("744f493648c83c5ede1726a0cfbe36d3830fd5b64a820b79ca77fe1593352686", "00828501610088565b91505092915050565b6100d3816100f4565b8252505056"),
        makeKvp("744f493648c83c5ede1726a0cfbe36d3830fd5b64a820b79ca77fe1593352687", "005b60006020820190506100ee60008301846100ca565b92915050565b600081"),
        makeKvp("744f493648c83c5ede1726a0cfbe36d3830fd5b64a820b79ca77fe1593352688", "009050919050565b600080fd5b61010c816100f4565b811461011757600080fd"),
        makeKvp("744f493648c83c5ede1726a0cfbe36d3830fd5b64a820b79ca77fe1593352689", "005b5056fea2646970667358221220404e37f487a89a932dca5e77faaf6ca2de"),
        makeKvp("9661ae0db10ecdb9bea3ef0c5fb46bb233cb6ed7404b77e7b0732512ecc60100", "0000000000000000000000000000000000000000000000000000000000000000"),
        makeKvp("9661ae0db10ecdb9bea3ef0c5fb46bb233cb6ed7404b77e7b0732512ecc60101", "507a878a1965b9e2ce3f00000000000000000000000000000000000000000000"),
        makeKvp("9661ae0db10ecdb9bea3ef0c5fb46bb233cb6ed7404b77e7b0732512ecc60102", "0200000000000000000000000000000000000000000000000000000000000000"),
        makeKvp("9661ae0db10ecdb9bea3ef0c5fb46bb233cb6ed7404b77e7b0732512ecc60103", "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"),
        makeKvp("9661ae0db10ecdb9bea3ef0c5fb46bb233cb6ed7404b77e7b0732512ecc60104", "0000000000000000000000000000000000000000000000000000000000000000"),
    ];

    let db = MemoryDb::new();
    let config = TestConfig::new(db);
    let mut trie = Trie::new(config);
    trie.insert(kvps.into_iter());
    let text = format!("{trie:#?}");
    let mut file = File::create("tests/compatibility.result").expect("Can't create file");
    file.write_all(text.as_bytes()).expect("Can't write to file");

}


fn makeKvp(k: &str, v: &str) -> ([u8; 32], [u8; 32])
{
    let mut ret: ([u8; 32], [u8; 32]) = ([0; 32], [0; 32]);
    ret.0.copy_from_slice(&(Vec::<u8>::from_hex(k).expect("Invalid hexadecimal data"))[..32]);
    ret.1.copy_from_slice(&(Vec::<u8>::from_hex(v).expect("Invalid hexadecimal data"))[..32]);
    return ret;
}